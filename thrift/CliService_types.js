//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Types_ttypes = require('./Types_types')
var Data_ttypes = require('./Data_types')
var MetaData_ttypes = require('./MetaData_types')


var ttypes = module.exports = {};
ttypes.TProtocolVersion = {
  'QUERYCACHE_CLI_PROTOCOL_V1' : 0,
  'QUERYCACHE_CLI_PROTOCOL_V2' : 1,
  'QUERYCACHE_CLI_PROTOCOL_V3' : 2,
  'QUERYCACHE_CLI_PROTOCOL_V4' : 3,
  'QUERYCACHE_CLI_PROTOCOL_V5' : 4
};
ttypes.TStatusCode = {
  'SUCCESS_STATUS' : 0,
  'SUCCESS_WITH_INFO_STATUS' : 1,
  'STILL_EXECUTING_STATUS' : 2,
  'ERROR_STATUS' : 3,
  'INVALID_HANDLE_STATUS' : 4
};
ttypes.TSqlEngine = {
  'IMPALA' : 0,
  'HIVE' : 1,
  'PHOENIX' : 2,
  'PRESTO' : 3
};
ttypes.TOperationState = {
  'INITIALIZED_STATE' : 0,
  'RUNNING_STATE' : 1,
  'FINISHED_STATE' : 2,
  'CANCELED_STATE' : 3,
  'CLOSED_STATE' : 4,
  'ERROR_STATE' : 5,
  'UNKNOWN_STATE' : 6
};
ttypes.TOperationType = {
  'EXECUTE_STATEMENT' : 0,
  'GET_TYPE_INFO' : 1,
  'GET_CATALOGS' : 2,
  'GET_SCHEMAS' : 3,
  'GET_TABLES' : 4,
  'GET_TABLE_TYPES' : 5,
  'GET_COLUMNS' : 6,
  'GET_FUNCTIONS' : 7,
  'UNKNOWN' : 8
};
ttypes.TGetInfoType = {
  'CLI_SOME_REQ' : 0
};
ttypes.TFetchOrientation = {
  'FETCH_NEXT' : 0,
  'FETCH_PRIOR' : 1,
  'FETCH_RELATIVE' : 2,
  'FETCH_ABSOLUTE' : 3,
  'FETCH_FIRST' : 4,
  'FETCH_LAST' : 5
};
TStatus = module.exports.TStatus = function(args) {
  this.statusCode = null;
  this.infoMessages = null;
  this.sqlState = null;
  this.errorCode = null;
  this.errorMessage = null;
  if (args) {
    if (args.statusCode !== undefined) {
      this.statusCode = args.statusCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statusCode is unset!');
    }
    if (args.infoMessages !== undefined) {
      this.infoMessages = args.infoMessages;
    }
    if (args.sqlState !== undefined) {
      this.sqlState = args.sqlState;
    }
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
TStatus.prototype = {};
TStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.statusCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.infoMessages = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.infoMessages.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sqlState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatus.prototype.write = function(output) {
  output.writeStructBegin('TStatus');
  if (this.statusCode !== null && this.statusCode !== undefined) {
    output.writeFieldBegin('statusCode', Thrift.Type.I32, 1);
    output.writeI32(this.statusCode);
    output.writeFieldEnd();
  }
  if (this.infoMessages !== null && this.infoMessages !== undefined) {
    output.writeFieldBegin('infoMessages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.infoMessages.length);
    for (var iter7 in this.infoMessages)
    {
      if (this.infoMessages.hasOwnProperty(iter7))
      {
        iter7 = this.infoMessages[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sqlState !== null && this.sqlState !== undefined) {
    output.writeFieldBegin('sqlState', Thrift.Type.STRING, 3);
    output.writeString(this.sqlState);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 5);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THandleIdentifier = module.exports.THandleIdentifier = function(args) {
  this.connid = 0;
  this.stmtid = 0;
  this.driverType = null;
  if (args) {
    if (args.connid !== undefined) {
      this.connid = args.connid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field connid is unset!');
    }
    if (args.stmtid !== undefined) {
      this.stmtid = args.stmtid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stmtid is unset!');
    }
    if (args.driverType !== undefined) {
      this.driverType = args.driverType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field driverType is unset!');
    }
  }
};
THandleIdentifier.prototype = {};
THandleIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.connid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.stmtid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.driverType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THandleIdentifier.prototype.write = function(output) {
  output.writeStructBegin('THandleIdentifier');
  if (this.connid !== null && this.connid !== undefined) {
    output.writeFieldBegin('connid', Thrift.Type.I64, 1);
    output.writeI64(this.connid);
    output.writeFieldEnd();
  }
  if (this.stmtid !== null && this.stmtid !== undefined) {
    output.writeFieldBegin('stmtid', Thrift.Type.I64, 2);
    output.writeI64(this.stmtid);
    output.writeFieldEnd();
  }
  if (this.driverType !== null && this.driverType !== undefined) {
    output.writeFieldBegin('driverType', Thrift.Type.STRING, 3);
    output.writeString(this.driverType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSessionHandle = module.exports.TSessionHandle = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
  }
};
TSessionHandle.prototype = {};
TSessionHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new ttypes.THandleIdentifier();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSessionHandle.prototype.write = function(output) {
  output.writeStructBegin('TSessionHandle');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOperationHandle = module.exports.TOperationHandle = function(args) {
  this.operationId = null;
  this.operationType = null;
  this.hasResultSet = null;
  this.updateRowCount = null;
  if (args) {
    if (args.operationId !== undefined) {
      this.operationId = args.operationId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationId is unset!');
    }
    if (args.operationType !== undefined) {
      this.operationType = args.operationType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationType is unset!');
    }
    if (args.hasResultSet !== undefined) {
      this.hasResultSet = args.hasResultSet;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasResultSet is unset!');
    }
    if (args.updateRowCount !== undefined) {
      this.updateRowCount = args.updateRowCount;
    }
  }
};
TOperationHandle.prototype = {};
TOperationHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.updateRowCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOperationHandle.prototype.write = function(output) {
  output.writeStructBegin('TOperationHandle');
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 1);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.I32, 2);
    output.writeI32(this.operationType);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.updateRowCount !== null && this.updateRowCount !== undefined) {
    output.writeFieldBegin('updateRowCount', Thrift.Type.I32, 4);
    output.writeI32(this.updateRowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THostInfo = module.exports.THostInfo = function(args) {
  this.hostname = null;
  this.ipaddr = null;
  this.portnum = null;
  if (args) {
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.ipaddr !== undefined) {
      this.ipaddr = args.ipaddr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ipaddr is unset!');
    }
    if (args.portnum !== undefined) {
      this.portnum = args.portnum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field portnum is unset!');
    }
  }
};
THostInfo.prototype = {};
THostInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipaddr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.portnum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THostInfo.prototype.write = function(output) {
  output.writeStructBegin('THostInfo');
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.ipaddr !== null && this.ipaddr !== undefined) {
    output.writeFieldBegin('ipaddr', Thrift.Type.STRING, 2);
    output.writeString(this.ipaddr);
    output.writeFieldEnd();
  }
  if (this.portnum !== null && this.portnum !== undefined) {
    output.writeFieldBegin('portnum', Thrift.Type.I32, 3);
    output.writeI32(this.portnum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOpenSessionReq = module.exports.TOpenSessionReq = function(args) {
  this.clientProtocol = 0;
  this.url = null;
  this.username = null;
  this.password = null;
  this.configurationMap = null;
  this.variablesMap = null;
  this.hostInfo = null;
  this.clientVersion = null;
  if (args) {
    if (args.clientProtocol !== undefined) {
      this.clientProtocol = args.clientProtocol;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientProtocol is unset!');
    }
    if (args.url !== undefined) {
      this.url = args.url;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field url is unset!');
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.configurationMap !== undefined) {
      this.configurationMap = args.configurationMap;
    }
    if (args.variablesMap !== undefined) {
      this.variablesMap = args.variablesMap;
    }
    if (args.hostInfo !== undefined) {
      this.hostInfo = args.hostInfo;
    }
    if (args.clientVersion !== undefined) {
      this.clientVersion = args.clientVersion;
    }
  }
};
TOpenSessionReq.prototype = {};
TOpenSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.clientProtocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.configurationMap = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readString();
          this.configurationMap[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.variablesMap = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readString();
          val23 = input.readString();
          this.variablesMap[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.hostInfo = new ttypes.THostInfo();
        this.hostInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.clientVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionReq');
  if (this.clientProtocol !== null && this.clientProtocol !== undefined) {
    output.writeFieldBegin('clientProtocol', Thrift.Type.I32, 1);
    output.writeI32(this.clientProtocol);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.configurationMap !== null && this.configurationMap !== undefined) {
    output.writeFieldBegin('configurationMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configurationMap));
    for (var kiter24 in this.configurationMap)
    {
      if (this.configurationMap.hasOwnProperty(kiter24))
      {
        var viter25 = this.configurationMap[kiter24];
        output.writeString(kiter24);
        output.writeString(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.variablesMap !== null && this.variablesMap !== undefined) {
    output.writeFieldBegin('variablesMap', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.variablesMap));
    for (var kiter26 in this.variablesMap)
    {
      if (this.variablesMap.hasOwnProperty(kiter26))
      {
        var viter27 = this.variablesMap[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.hostInfo !== null && this.hostInfo !== undefined) {
    output.writeFieldBegin('hostInfo', Thrift.Type.STRUCT, 6);
    this.hostInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.clientVersion !== null && this.clientVersion !== undefined) {
    output.writeFieldBegin('clientVersion', Thrift.Type.STRING, 7);
    output.writeString(this.clientVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOpenSessionResp = module.exports.TOpenSessionResp = function(args) {
  this.status = null;
  this.serverProtocol = 0;
  this.sessionHandle = null;
  this.hostInfo = null;
  this.configuration = null;
  this.sqlEngine = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.serverProtocol !== undefined) {
      this.serverProtocol = args.serverProtocol;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverProtocol is unset!');
    }
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.hostInfo !== undefined) {
      this.hostInfo = args.hostInfo;
    }
    if (args.configuration !== undefined) {
      this.configuration = args.configuration;
    }
    if (args.sqlEngine !== undefined) {
      this.sqlEngine = args.sqlEngine;
    }
  }
};
TOpenSessionResp.prototype = {};
TOpenSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.hostInfo = new ttypes.THostInfo();
        this.hostInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size28 = 0;
        var _rtmp332;
        this.configuration = {};
        var _ktype29 = 0;
        var _vtype30 = 0;
        _rtmp332 = input.readMapBegin();
        _ktype29 = _rtmp332.ktype;
        _vtype30 = _rtmp332.vtype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var key34 = null;
          var val35 = null;
          key34 = input.readString();
          val35 = input.readString();
          this.configuration[key34] = val35;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sqlEngine = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.serverProtocol !== null && this.serverProtocol !== undefined) {
    output.writeFieldBegin('serverProtocol', Thrift.Type.I32, 2);
    output.writeI32(this.serverProtocol);
    output.writeFieldEnd();
  }
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 3);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.hostInfo !== null && this.hostInfo !== undefined) {
    output.writeFieldBegin('hostInfo', Thrift.Type.STRUCT, 4);
    this.hostInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter36 in this.configuration)
    {
      if (this.configuration.hasOwnProperty(kiter36))
      {
        var viter37 = this.configuration[kiter36];
        output.writeString(kiter36);
        output.writeString(viter37);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sqlEngine !== null && this.sqlEngine !== undefined) {
    output.writeFieldBegin('sqlEngine', Thrift.Type.I32, 6);
    output.writeI32(this.sqlEngine);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseSessionReq = module.exports.TCloseSessionReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TCloseSessionReq.prototype = {};
TCloseSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseSessionResp = module.exports.TCloseSessionResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseSessionResp.prototype = {};
TCloseSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoValue = module.exports.TGetInfoValue = function(args) {
  this.stringValue = null;
  this.smallIntValue = null;
  this.integerBitmask = null;
  this.integerFlag = null;
  this.binaryValue = null;
  this.lenValue = null;
  if (args) {
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.smallIntValue !== undefined) {
      this.smallIntValue = args.smallIntValue;
    }
    if (args.integerBitmask !== undefined) {
      this.integerBitmask = args.integerBitmask;
    }
    if (args.integerFlag !== undefined) {
      this.integerFlag = args.integerFlag;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.lenValue !== undefined) {
      this.lenValue = args.lenValue;
    }
  }
};
TGetInfoValue.prototype = {};
TGetInfoValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.smallIntValue = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.integerBitmask = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.integerFlag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.binaryValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lenValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoValue.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.smallIntValue !== null && this.smallIntValue !== undefined) {
    output.writeFieldBegin('smallIntValue', Thrift.Type.I16, 2);
    output.writeI16(this.smallIntValue);
    output.writeFieldEnd();
  }
  if (this.integerBitmask !== null && this.integerBitmask !== undefined) {
    output.writeFieldBegin('integerBitmask', Thrift.Type.I32, 3);
    output.writeI32(this.integerBitmask);
    output.writeFieldEnd();
  }
  if (this.integerFlag !== null && this.integerFlag !== undefined) {
    output.writeFieldBegin('integerFlag', Thrift.Type.I32, 4);
    output.writeI32(this.integerFlag);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.I32, 5);
    output.writeI32(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.lenValue !== null && this.lenValue !== undefined) {
    output.writeFieldBegin('lenValue', Thrift.Type.I64, 6);
    output.writeI64(this.lenValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoReq = module.exports.TGetInfoReq = function(args) {
  this.sessionHandle = null;
  this.infoType = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.infoType !== undefined) {
      this.infoType = args.infoType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoType is unset!');
    }
  }
};
TGetInfoReq.prototype = {};
TGetInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.infoType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.infoType !== null && this.infoType !== undefined) {
    output.writeFieldBegin('infoType', Thrift.Type.I32, 2);
    output.writeI32(this.infoType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoResp = module.exports.TGetInfoResp = function(args) {
  this.status = null;
  this.infoValue = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.infoValue !== undefined) {
      this.infoValue = args.infoValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoValue is unset!');
    }
  }
};
TGetInfoResp.prototype = {};
TGetInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.infoValue = new ttypes.TGetInfoValue();
        this.infoValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.infoValue !== null && this.infoValue !== undefined) {
    output.writeFieldBegin('infoValue', Thrift.Type.STRUCT, 2);
    this.infoValue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemaReq = module.exports.TGetSchemaReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TGetSchemaReq.prototype = {};
TGetSchemaReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemaReq.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemaReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemaResp = module.exports.TGetSchemaResp = function(args) {
  this.status = null;
  this.schema = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schema is unset!');
    }
  }
};
TGetSchemaResp.prototype = {};
TGetSchemaResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.schema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemaResp.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemaResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRING, 2);
    output.writeString(this.schema);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSetSchemaReq = module.exports.TSetSchemaReq = function(args) {
  this.sessionHandle = null;
  this.schema = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schema is unset!');
    }
  }
};
TSetSchemaReq.prototype = {};
TSetSchemaReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.schema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSetSchemaReq.prototype.write = function(output) {
  output.writeStructBegin('TSetSchemaReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRING, 2);
    output.writeString(this.schema);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSetSchemaResp = module.exports.TSetSchemaResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TSetSchemaResp.prototype = {};
TSetSchemaResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSetSchemaResp.prototype.write = function(output) {
  output.writeStructBegin('TSetSchemaResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExecuteStatementReq = module.exports.TExecuteStatementReq = function(args) {
  this.sessionHandle = null;
  this.statement = null;
  this.configuration = null;
  this.asyncMode = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.statement !== undefined) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.configuration !== undefined) {
      this.configuration = args.configuration;
    }
    if (args.asyncMode !== undefined) {
      this.asyncMode = args.asyncMode;
    }
  }
};
TExecuteStatementReq.prototype = {};
TExecuteStatementReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size38 = 0;
        var _rtmp342;
        this.configuration = {};
        var _ktype39 = 0;
        var _vtype40 = 0;
        _rtmp342 = input.readMapBegin();
        _ktype39 = _rtmp342.ktype;
        _vtype40 = _rtmp342.vtype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var key44 = null;
          var val45 = null;
          key44 = input.readString();
          val45 = input.readString();
          this.configuration[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.asyncMode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementReq.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter46 in this.configuration)
    {
      if (this.configuration.hasOwnProperty(kiter46))
      {
        var viter47 = this.configuration[kiter46];
        output.writeString(kiter46);
        output.writeString(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.asyncMode !== null && this.asyncMode !== undefined) {
    output.writeFieldBegin('asyncMode', Thrift.Type.BOOL, 4);
    output.writeBool(this.asyncMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExecuteStatementResp = module.exports.TExecuteStatementResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.asyncMode = null;
  this.operationState = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
    if (args.asyncMode !== undefined) {
      this.asyncMode = args.asyncMode;
    }
    if (args.operationState !== undefined) {
      this.operationState = args.operationState;
    }
  }
};
TExecuteStatementResp.prototype = {};
TExecuteStatementResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.asyncMode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.operationState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementResp.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.asyncMode !== null && this.asyncMode !== undefined) {
    output.writeFieldBegin('asyncMode', Thrift.Type.BOOL, 3);
    output.writeBool(this.asyncMode);
    output.writeFieldEnd();
  }
  if (this.operationState !== null && this.operationState !== undefined) {
    output.writeFieldBegin('operationState', Thrift.Type.I32, 4);
    output.writeI32(this.operationState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTypeInfoReq = module.exports.TGetTypeInfoReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TGetTypeInfoReq.prototype = {};
TGetTypeInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTypeInfoResp = module.exports.TGetTypeInfoResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetTypeInfoResp.prototype = {};
TGetTypeInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCatalogsReq = module.exports.TGetCatalogsReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TGetCatalogsReq.prototype = {};
TGetCatalogsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCatalogsResp = module.exports.TGetCatalogsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetCatalogsResp.prototype = {};
TGetCatalogsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemasReq = module.exports.TGetSchemasReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined) {
      this.schemaName = args.schemaName;
    }
  }
};
TGetSchemasReq.prototype = {};
TGetSchemasReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasReq.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemasResp = module.exports.TGetSchemasResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetSchemasResp.prototype = {};
TGetSchemasResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasResp.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTablesReq = module.exports.TGetTablesReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.tableTypes = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableTypes !== undefined) {
      this.tableTypes = args.tableTypes;
    }
  }
};
TGetTablesReq.prototype = {};
TGetTablesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.tableTypes = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString();
          this.tableTypes.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableTypes !== null && this.tableTypes !== undefined) {
    output.writeFieldBegin('tableTypes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tableTypes.length);
    for (var iter55 in this.tableTypes)
    {
      if (this.tableTypes.hasOwnProperty(iter55))
      {
        iter55 = this.tableTypes[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTablesResp = module.exports.TGetTablesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetTablesResp.prototype = {};
TGetTablesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTableTypesReq = module.exports.TGetTableTypesReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TGetTableTypesReq.prototype = {};
TGetTableTypesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTableTypesResp = module.exports.TGetTableTypesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetTableTypesResp.prototype = {};
TGetTableTypesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetColumnsReq = module.exports.TGetColumnsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.columnName = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
  }
};
TGetColumnsReq.prototype = {};
TGetColumnsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetColumnsResp = module.exports.TGetColumnsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetColumnsResp.prototype = {};
TGetColumnsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetOperationStatusReq = module.exports.TGetOperationStatusReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TGetOperationStatusReq.prototype = {};
TGetOperationStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusReq.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetOperationStatusResp = module.exports.TGetOperationStatusResp = function(args) {
  this.status = null;
  this.operationState = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationState !== undefined) {
      this.operationState = args.operationState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationState is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetOperationStatusResp.prototype = {};
TGetOperationStatusResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusResp.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationState !== null && this.operationState !== undefined) {
    output.writeFieldBegin('operationState', Thrift.Type.I32, 2);
    output.writeI32(this.operationState);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 3);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelOperationReq = module.exports.TCancelOperationReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TCancelOperationReq.prototype = {};
TCancelOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelOperationResp = module.exports.TCancelOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCancelOperationResp.prototype = {};
TCancelOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseOperationReq = module.exports.TCloseOperationReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TCloseOperationReq.prototype = {};
TCloseOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseOperationResp = module.exports.TCloseOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseOperationResp.prototype = {};
TCloseOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetResultSetMetadataReq = module.exports.TGetResultSetMetadataReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TGetResultSetMetadataReq.prototype = {};
TGetResultSetMetadataReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataReq.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetResultSetMetadataResp = module.exports.TGetResultSetMetadataResp = function(args) {
  this.status = null;
  this.schema = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
  }
};
TGetResultSetMetadataResp.prototype = {};
TGetResultSetMetadataResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new Data_ttypes.TTableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataResp.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 2);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchResultsReq = module.exports.TFetchResultsReq = function(args) {
  this.operationHandle = null;
  this.orientation = 0;
  this.maxRows = -1;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.orientation !== undefined) {
      this.orientation = args.orientation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field orientation is unset!');
    }
    if (args.maxRows !== undefined) {
      this.maxRows = args.maxRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxRows is unset!');
    }
  }
};
TFetchResultsReq.prototype = {};
TFetchResultsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.orientation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.maxRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsReq.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.orientation !== null && this.orientation !== undefined) {
    output.writeFieldBegin('orientation', Thrift.Type.I32, 2);
    output.writeI32(this.orientation);
    output.writeFieldEnd();
  }
  if (this.maxRows !== null && this.maxRows !== undefined) {
    output.writeFieldBegin('maxRows', Thrift.Type.I64, 3);
    output.writeI64(this.maxRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchResultsResp = module.exports.TFetchResultsResp = function(args) {
  this.status = null;
  this.hasMoreRows = null;
  this.results = null;
  this.numofrows = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.hasMoreRows !== undefined) {
      this.hasMoreRows = args.hasMoreRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasMoreRows is unset!');
    }
    if (args.results !== undefined) {
      this.results = args.results;
    }
    if (args.numofrows !== undefined) {
      this.numofrows = args.numofrows;
    }
  }
};
TFetchResultsResp.prototype = {};
TFetchResultsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMoreRows = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new Data_ttypes.TRowSet();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numofrows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsResp.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.hasMoreRows !== null && this.hasMoreRows !== undefined) {
    output.writeFieldBegin('hasMoreRows', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasMoreRows);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 3);
    this.results.write(output);
    output.writeFieldEnd();
  }
  if (this.numofrows !== null && this.numofrows !== undefined) {
    output.writeFieldBegin('numofrows', Thrift.Type.I64, 4);
    output.writeI64(this.numofrows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchQueryLogReq = module.exports.TFetchQueryLogReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TFetchQueryLogReq.prototype = {};
TFetchQueryLogReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchQueryLogReq.prototype.write = function(output) {
  output.writeStructBegin('TFetchQueryLogReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchQueryLogResp = module.exports.TFetchQueryLogResp = function(args) {
  this.status = null;
  this.queryLogs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.queryLogs !== undefined) {
      this.queryLogs = args.queryLogs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryLogs is unset!');
    }
  }
};
TFetchQueryLogResp.prototype = {};
TFetchQueryLogResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.queryLogs = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.queryLogs.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchQueryLogResp.prototype.write = function(output) {
  output.writeStructBegin('TFetchQueryLogResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.queryLogs !== null && this.queryLogs !== undefined) {
    output.writeFieldBegin('queryLogs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.queryLogs.length);
    for (var iter63 in this.queryLogs)
    {
      if (this.queryLogs.hasOwnProperty(iter63))
      {
        iter63 = this.queryLogs[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetFunctionsReq = module.exports.TGetFunctionsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.functionName = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined) {
      this.schemaName = args.schemaName;
    }
    if (args.functionName !== undefined) {
      this.functionName = args.functionName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field functionName is unset!');
    }
  }
};
TGetFunctionsReq.prototype = {};
TGetFunctionsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 4);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetFunctionsResp = module.exports.TGetFunctionsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined) {
      this.operationHandle = args.operationHandle;
    }
  }
};
TGetFunctionsResp.prototype = {};
TGetFunctionsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSetAutoCommitReq = module.exports.TSetAutoCommitReq = function(args) {
  this.sessionHandle = null;
  this.autoCommit = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.autoCommit !== undefined) {
      this.autoCommit = args.autoCommit;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autoCommit is unset!');
    }
  }
};
TSetAutoCommitReq.prototype = {};
TSetAutoCommitReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.autoCommit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSetAutoCommitReq.prototype.write = function(output) {
  output.writeStructBegin('TSetAutoCommitReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.autoCommit !== null && this.autoCommit !== undefined) {
    output.writeFieldBegin('autoCommit', Thrift.Type.BOOL, 2);
    output.writeBool(this.autoCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSetAutoCommitResp = module.exports.TSetAutoCommitResp = function(args) {
  this.status = null;
  this.autoCommit = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.autoCommit !== undefined) {
      this.autoCommit = args.autoCommit;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autoCommit is unset!');
    }
  }
};
TSetAutoCommitResp.prototype = {};
TSetAutoCommitResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.autoCommit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSetAutoCommitResp.prototype.write = function(output) {
  output.writeStructBegin('TSetAutoCommitResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.autoCommit !== null && this.autoCommit !== undefined) {
    output.writeFieldBegin('autoCommit', Thrift.Type.BOOL, 2);
    output.writeBool(this.autoCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetAutoCommitReq = module.exports.TGetAutoCommitReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TGetAutoCommitReq.prototype = {};
TGetAutoCommitReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetAutoCommitReq.prototype.write = function(output) {
  output.writeStructBegin('TGetAutoCommitReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetAutoCommitResp = module.exports.TGetAutoCommitResp = function(args) {
  this.status = null;
  this.autoCommit = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.autoCommit !== undefined) {
      this.autoCommit = args.autoCommit;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autoCommit is unset!');
    }
  }
};
TGetAutoCommitResp.prototype = {};
TGetAutoCommitResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.autoCommit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetAutoCommitResp.prototype.write = function(output) {
  output.writeStructBegin('TGetAutoCommitResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.autoCommit !== null && this.autoCommit !== undefined) {
    output.writeFieldBegin('autoCommit', Thrift.Type.BOOL, 2);
    output.writeBool(this.autoCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCommitReq = module.exports.TCommitReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TCommitReq.prototype = {};
TCommitReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommitReq.prototype.write = function(output) {
  output.writeStructBegin('TCommitReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCommitResp = module.exports.TCommitResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCommitResp.prototype = {};
TCommitResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommitResp.prototype.write = function(output) {
  output.writeStructBegin('TCommitResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRollbackReq = module.exports.TRollbackReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined) {
      this.sessionHandle = args.sessionHandle;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TRollbackReq.prototype = {};
TRollbackReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRollbackReq.prototype.write = function(output) {
  output.writeStructBegin('TRollbackReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRollbackResp = module.exports.TRollbackResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TRollbackResp.prototype = {};
TRollbackResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRollbackResp.prototype.write = function(output) {
  output.writeStructBegin('TRollbackResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TShutdownStatus = module.exports.TShutdownStatus = function(args) {
  this.bFinished = null;
  this.log = null;
  if (args) {
    if (args.bFinished !== undefined) {
      this.bFinished = args.bFinished;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bFinished is unset!');
    }
    if (args.log !== undefined) {
      this.log = args.log;
    }
  }
};
TShutdownStatus.prototype = {};
TShutdownStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.bFinished = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.log = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.log.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TShutdownStatus.prototype.write = function(output) {
  output.writeStructBegin('TShutdownStatus');
  if (this.bFinished !== null && this.bFinished !== undefined) {
    output.writeFieldBegin('bFinished', Thrift.Type.BOOL, 1);
    output.writeBool(this.bFinished);
    output.writeFieldEnd();
  }
  if (this.log !== null && this.log !== undefined) {
    output.writeFieldBegin('log', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.log.length);
    for (var iter71 in this.log)
    {
      if (this.log.hasOwnProperty(iter71))
      {
        iter71 = this.log[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

